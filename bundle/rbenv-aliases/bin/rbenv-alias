#!/usr/bin/env bash
#
# Summary: Symlink a short name to an exact version
#
# Usage: rbenv alias <name> [<version> | --auto | --remove]
#        rbenv alias --auto
#        rbenv alias [--list]
#
# Symlink a short name to an exact version.  Passing a second argument of
# --auto selects the latest patch release of the given point version.  Passing
# a first argument of auto does the same for all installed point releases.

shopt -s nullglob

cd "$RBENV_ROOT/versions"

resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

list() {
  local exit=1
  local dir
  for dir in $(echo_lines *); do
    if [ -L "$dir" ]; then
      echo "$dir => $(resolve_link "$dir")"
      exit=0
    fi
  done
  return $exit
}

cleanup_invalid() {
  local version
  for version in ${1:-*}; do
    if [ -L $version -a ! -e "$(resolve_link $version)" ]; then
      echo "Removing invalid link from $version to $(resolve_link $version)"
      rm $version
    fi
  done
}

echo_lines() {
  local line
  for line in "$@"; do
    echo "$line"
  done
}

echo_lines_without_symlinks() {
  local file
  for file in "$@"; do
    [ ! -L "$file" ] && echo "$file"
  done
}

sort_versions() {
  local patch_start_point

  case "$1" in
    *.*.*) patch_start_point=$((${#1} + 3)) ;; # point_release string length + 1 (0 indexed) + 2 for `-p` separator
    *.*)   patch_start_point=$((${#1} + 2)) ;; # point_release string length + 1 (0 indexed) + 1 for `.` separator
  esac

  sort -n -k "1.$patch_start_point"
}

auto_for_point() {
  echo_lines_without_symlinks $1* | sort_versions "$1" | tail -1
}

auto_symlink_point() {
  local auto="$(auto_for_point $1)"
  if [ -z "$auto" ]; then
    echo "Couldn't find any versions for $1" >&2
  else
    ln -nsf "$auto" "$1"
    echo "$1 => $auto"
  fi
}

point_releases() {
  echo_lines_without_symlinks *.*.* | sed -e 's/\.[^-.]*$//' -e 's/-[^.]*$//' | sort -u
}

abort() {
  { if [ "$#" -eq 0 ]; then cat -
    else echo "rbenv-alias: $*"
    fi
  } >&2
  exit 1
}

# Provide rbenv completions
if [ --complete = "$1" ]; then
  shift
  if [ "$#" = 1 ]; then
    echo --auto
    echo --remove
    rbenv-versions --bare
  elif [ "$#" = 0 ]; then
    echo --auto
    echo --list
    { point_releases; rbenv-versions --bare; } | sort -u
  fi
  exit 0
fi

case "$#" in

  2)
    case "$1" in --*)
      case "$2" in -*) abort < <(rbenv-help --usage alias) ;; esac
      exec rbenv-alias "$2" "$1" ;;
    esac
    if [ -e "$1" -a ! -L "$1" ]; then abort "Not clobbering $1"
    elif [ --remove = "$2" ]; then
      if [ -L "$1" ]; then rm "$1"
      else abort "No such alias $1"
      fi
    elif [ --auto = "$2" ]; then
      case "$1" in
        *.*) cleanup_invalid "$1" && auto_symlink_point "$1" ;;
        *) abort "Don't know how to automatically alias $1" ;;
      esac
    else
      echo "$1 => $2"
      ln -nsf "$2" "$1"
    fi
    ;;

  1)
    case "$1" in
      --list)
        list
        ;;
      --auto|--all)
        cleanup_invalid
        for point in $(point_releases); do
          auto_symlink_point $point
        done
        ;;
      --help)
        exec rbenv-help alias
        ;;
      -*)
        abort < <(rbenv-help --usage alias)
        ;;
      *)
        if [ -L "$1" ]; then readlink "$1"
        elif [ -d "$1" ]; then abort "$1 is an install, not an alias"
        elif [ -e "$1" ]; then abort "$1 exists but is not an alias"
        else abort "$1 does not exist"
        fi
    esac
    ;;

  0) list ;;

  *) abort < <(rbenv-help --usage alias) ;;
esac
